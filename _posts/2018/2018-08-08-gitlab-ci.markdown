---
layout: post
title: Gitlab Misc.
date: '2018-08-10 13:19'
subtitle: Access Control, Gitlab CI
comments: true
tags:
    - Linux
---

## Access Control

If you are not sure who have the merge privileges,

1. Go to your project.
2. Navigate to: `Project Information > Members`
3. Check Roles with write access:
    - Maintainer â€“ Full access, including merge.
    - Developer â€“ Can push and typically merge, unless restricted.

## ðŸ§ª Basic Pipeline

1. Build Strategy Options: there are two main ways to build Docker images in GitLab CI:
    - Option A: Docker-in-Docker (DinD)
        - Requires privileged: true.
        - Enables full Docker commands inside a container.
        - More self-contained but slower and more complex.
    - Option B: Test in default container and split Jobs
        - login_job â€“ performs Docker login.
        - build_job â€“ builds and tags the image.
        - push_job â€“ pushes to registry.
            - Use cache: to persist login credentials between jobs.

                ```
                cache:
                key: docker-login
                paths:
                    - ~/.docker/config.json
                ```

    - Automatically triggered by:
        - Pushes to main, feature/*, or merge requests.
        - Scheduled nightly CI jobs.
    - By default, these jobs are run in parallel

3. Image Deployment
    - After downloading:

        ```
        docker load -i image.tar
        ```

    - Final deployment pushes image to GitLab Container Registry or Docker Hub.
