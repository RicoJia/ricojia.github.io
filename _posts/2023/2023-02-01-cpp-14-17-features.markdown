---
layout: post
title: C++ - Cpp14, 17, 20 Features
date: '2023-02-01 13:19'
subtitle: Lambda Capture
comments: true
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - C++
---

## Introduction

What is C++? My definition is that C++ is a set of progressive standards. So far, there are C++98/03 (small modification), C++ 11 (Major Release), C++ 14, C++17, C++20, C++23. Each standard introduced new features, and remove some un-necessary features. Some examples are:

- `type_traits`: introduced in C++11 to help with generic programming
- Lambda expression was introduced in C++11. But it was expanded and modified in all later C++ releases.
- `auto_ptr` was deprecated in C++11 and removed in C++17. Its successor, `unique_ptr` and `shared_ptr` are much more widely used now.

Each standard is a file that [could be purchased in this link](https://isocpp.org/std/the-standard), and C++ implementation is done by a few vendors, such as Clang, GCC, MSVC. 


## C++14 Features

- [Lambda Capture](https://ricojia.github.io/2023/02/13/cpp-functions-lambda/)

## C++ 17 Features

- [SIMD and Vectorization in `std::for_each`](https://ricojia.github.io/2023/02/19/cpp-multithreading/)
- [std::optional to indicate whether a variable has trustable value](https://ricojia.github.io/2023/01/05/cpp-datatypes/)
- [std::reduce to aggregates (or "reduce") a container into something else](https://ricojia.github.io/2023/01/20/cpp-algorithm-functions/)
- [Structural binding to make unpacking easier](https://ricojia.github.io/2023/01/05/cpp-datatypes/)
- [PMR containers](https://ricojia.github.io/2023/01/28/cpp-containers/)
- [if constexpr](https://ricojia.github.io/2023/02/01/cpp-constness/)
- [if with initializer](https://ricojia.github.io/2023/01/15/cpp-control-flow/)

## Cpp 20 Features

C++20 is a large coding standard upgrade (from C++ 17 code) with lots of new paradigms.

- Template lambda for more explicit typing [See here](https://ricojia.github.io/2023/02/13/cpp-functions-lambda/)
- Concepts for type constraints, [see here](https://ricojia.github.io/2023/02/10/cpp-templates/)
- [Ranges For Lazy Evaluation](https://ricojia.github.io/2023/01/15/cpp-control-flow/)
- [Constexpr on dynamically allocated objects](https://ricojia.github.io/2023/02/01/cpp-constness/)
- [Coroutine For Async Programming](https://ricojia.github.io/2023/02/20/cpp-coroutine/)
- [Ranges](https://ricojia.github.io/2023/01/15/cpp-control-flow/)

### Summary

| Feature                     | C++17                  | C++20                     | Benefit                         |
|-----------------------------|------------------------|---------------------------|---------------------------------|
| Template Lambdas            | `auto` only           | `template<>`              | More type flexibility          |
| Concepts (`std::integral`)  | `enable_if`           | Cleaner syntax            | Faster compilation             |
| Ranges (`views::filter`)    | Manual loops          | Functional style          | Concise, lazy evaluation       |
| Coroutines (`co_await`)     | Threads + Futures     | Native coroutines         | Simpler async code             |
| `constexpr` STL Containers  | Limited               | `std::vector<>` allowed   | Compile-time optimizations     |
