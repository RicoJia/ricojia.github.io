---
layout: post
title: C++ - Cpp14, 17, 20 Features
date: '2023-02-01 13:19'
subtitle: Lambda Capture
comments: true
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - C++
---

## C++14 Features

- [Lambda Capture](https://ricojia.github.io/2023/02/13/cpp-functions-lambda/)

## C++ 17 Features

- [SIMD and Vectorization in `std::for_each`](https://ricojia.github.io/2023/02/19/cpp-multithreading/)

## Cpp 20 Features

C++20 is a large coding standard upgrade (from C++ 17 code) with lots of new paradigms.

- Template lambda for more explicit typing [See here](https://ricojia.github.io/2023/02/13/cpp-functions-lambda/)
- Concepts for type constraints, [see here](https://ricojia.github.io/2023/02/10/cpp-templates/)
- [Ranges For Lazy Evaluation](https://ricojia.github.io/2023/01/15/cpp-control-flow/)
- [Constexpr on dynamically allocated objects](https://ricojia.github.io/2023/02/01/cpp-constness/)
- Coroutine For Async Programming

```cpp
// C++ 17
std::future<int> async_task() {
    return std::async([] { return 42; });
}

// C++ 20
#include <coroutine>

std::future<int> async_task() {
    co_return 42;
}
```

### Summary

| Feature                     | C++17                  | C++20                     | Benefit                         |
|-----------------------------|------------------------|---------------------------|---------------------------------|
| Template Lambdas            | `auto` only           | `template<>`              | More type flexibility          |
| Concepts (`std::integral`)  | `enable_if`           | Cleaner syntax            | Faster compilation             |
| Ranges (`views::filter`)    | Manual loops          | Functional style          | Concise, lazy evaluation       |
| Coroutines (`co_await`)     | Threads + Futures     | Native coroutines         | Simpler async code             |
| `constexpr` STL Containers  | Limited               | `std::vector<>` allowed   | Compile-time optimizations     |